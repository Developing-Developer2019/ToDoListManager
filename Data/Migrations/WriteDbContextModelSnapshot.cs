// <auto-generated />
using System;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDateT")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Todo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Some Description",
                            DueDateT = new DateTime(2024, 9, 27, 16, 1, 42, 581, DateTimeKind.Local).AddTicks(6476),
                            IsCompleted = false,
                            Priority = 2,
                            Title = "Task 1",
                            UserId = "dff66c34-bd9b-4355-80ba-e7c7cd02d83f"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Some Description",
                            DueDateT = new DateTime(2024, 10, 1, 16, 1, 42, 581, DateTimeKind.Local).AddTicks(6535),
                            IsCompleted = false,
                            Priority = 1,
                            Title = "Task 2",
                            UserId = "dff66c34-bd9b-4355-80ba-e7c7cd02d83f"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Some Description",
                            DueDateT = new DateTime(2024, 9, 29, 16, 1, 42, 581, DateTimeKind.Local).AddTicks(6537),
                            IsCompleted = false,
                            Priority = 3,
                            Title = "Task 3",
                            UserId = "dff66c34-bd9b-4355-80ba-e7c7cd02d83f"
                        });
                });

            modelBuilder.Entity("Core.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "dff66c34-bd9b-4355-80ba-e7c7cd02d83f",
                            Name = "Example User"
                        });
                });

            modelBuilder.Entity("Core.Model.Todo", b =>
                {
                    b.HasOne("Core.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
